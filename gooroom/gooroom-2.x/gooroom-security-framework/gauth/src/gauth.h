#ifndef __GAUTH_H__
#define __GAUTH_H__

#include <sys/types.h>
#include <sys/stat.h>
#include <pthread.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <errno.h>
#include <poll.h>
#include <json.h>
#include <time.h>
#include "lsf-logger.h"

#define GAUTH_NAME                     "gauth"
#define LSF_POLICY_PATH                "/var/tmp/lsf/private/whitelist.policy"
#define GAUTH_DBUS_NAME                "kr.gooroom.gauth"
#define GAUTH_DBUS_OBJ                 "/kr/gooroom/gauth/LSFO"
#define GAUTH_DBUS_IFACE               "kr.gooroom.gauth.LSFI" 
#define GAUTH_RESP_FMT                 "{ \"seal\": { \"glyph\": \"%s\" } }"
#define GAUTH_RESP_EFMT                "{ \"seal\": { \"glyph\": \"%s\", \"errmsg\": \"%s\" } }"

#define GAUTH_RETRY_CNT                   3
#define MAX_THREAD                       10
#define POLICY_BUF_SIZE                4096
#define GAUTH_MSG_BUF_SIZE             1024

#define RANGE(x, y, z) (x >= y) ? (x < z) ? TRUE : FALSE : FALSE

typedef enum {
  GAUTH_STATE_CREATED,
  GAUTH_STATE_INITIALIZED,
  GAUTH_STATE_LOADED,
  GAUTH_STATE_CONNECTED,
  GAUTH_STATE_RUNNING,
  GAUTH_STATE_DEAD,
  GAUTH_STATE_NUM
} GAUTH_STATE;

typedef enum {
  GAUTH_MESSAGE_STATE_RECEIVED,
  GAUTH_MESSAGE_STATE_SENDER_VERIFIED,
  GAUTH_MESSAGE_STATE_PARSED,
  GAUTH_MESSAGE_STATE_GLYPH_VERIFIED_NORMAL,
  GAUTH_MESSAGE_STATE_GLYPH_VERIFIED_REAUTH,
  GAUTH_MESSAGE_STATE_GLYPH_VERIFIED_RELOAD,
  GAUTH_MESSAGE_STATE_FUNCTION_VERIFIED,
  GAUTH_MESSAGE_STATE_GLYPH_PROCESSED,
  GAUTH_MESSAGE_STATE_FUNCTION_PROCESSED,
  GAUTH_MESSAGE_STATE_MESSAGE_ERROR,
  GAUTH_MESSAGE_STATE_GLYPH_PROCESS_ERROR,
  GAUTH_MESSAGE_STATE_FUNCTION_PROCESS_ERROR,
  GAUTH_MESSAGE_STATE_RETURNED,
  GAUTH_MESSAGE_STATE_NUM
} GAUTH_MESSAGE_STATE;

typedef enum {
  GAUTH_RETURN_SUCCESS,
  GAUTH_RETURN_FAILURE
} GAUTH_RETURN;

typedef enum {
  GAUTH_ERROR_NONE = 2000,          // 2000:GAUTH_ERROR_NONE
  GAUTH_ERROR_LSF_CONNECT,          // 2001:GAUTH_ERROR_LSF_CONNECT
  GAUTH_ERROR_LSF_DH_KEY_REQUEST,   // 2002:GAUTH_ERROR_LSF_DH_KEY_REQUEST
  GAUTH_ERROR_UNKNOWN_METHOD,       // 2003:GAUTH_ERROR_UNKNOWN_METHOD
  GAUTH_ERROR_UNKNOWN_GLYPH,        // 2004:GAUTH_ERROR_UNKNOWN_GLYPH
  GAUTH_ERROR_UNKNOWN_FUNCTION,     // 2005:GAUTH_ERROR_UNKNOWN_FUNCTION
  GAUTH_ERROR_EMPTY_LETTER,         // 2006:GAUTH_ERROR_EMPTY_LETTER
  GAUTH_ERROR_DBUS_OWN_NAME,        // 2007:GAUTH_ERROR_DBUS_OWN_NAME
  GAUTH_ERROR_DBUS_NODE_NEW,        // 2008:GAUTH_ERROR_DBUS_NODE_NEW
  GAUTH_ERROR_DBUS_REGISTER,        // 2009:GAUTH_ERROR_DBUS_REGISTER
  GAUTH_ERROR_DBUS_GET,             // 2010:GAUTH_ERROR_DBUS_GET
  GAUTH_ERROR_DBUS_PROXY_NEW,       // 2011:GAUTH_ERROR_DBUS_PROXY_NEW
  GAUTH_ERROR_DBUS_PROXY_CALL,      // 2012:GAUTH_ERROR_DBUS_PROXY_CALL
  GAUTH_ERROR_DBUS_RETURN,          // 2013:GAUTH_ERROR_DBUS_RETURN
  GAUTH_ERROR_DBUS_CONF_CREATE,     // 2014:GAUTH_ERROR_DBUS_CONF_CREATE
  GAUTH_ERROR_FILE_OPEN,            // 2015:GAUTH_ERROR_FILE_OPEN
  GAUTH_ERROR_FILE_READ,            // 2016:GAUTH_ERROR_FILE_READ
  GAUTH_ERROR_JSON_PARSING,         // 2017:GAUTH_ERROR_JSON_PARSING
  GAUTH_ERROR_JSON_ARRAY_LENGTH,    // 2018:GAUTH_ERROR_JSON_ARRAY_LENGTH
  GAUTH_ERROR_JSON_ARRAY_GET,       // 2019:GAUTH_ERROR_JSON_ARRAY_GET
  GAUTH_ERROR_JSON_OBJECT_GET,      // 2020:GAUTH_ERROR_JSON_OBJECT_GET
  GAUTH_ERROR_LOAD_POLICY,          // 2021:GAUTH_ERROR_LOAD_POLICY
  GAUTH_ERROR_MEMORY_ALLOCATION,    // 2022:GAUTH_ERROR_MEMORY_ALLOCATION
  GAUTH_ERROR_PID_NOT_FOUND,        // 2023:GAUTH_ERROR_PID_NOT_FOUND
  GAUTH_ERROR_APP_NOT_FOUND,        // 2024:GAUTH_ERROR_APP_NOT_FOUND
  GAUTH_ERROR_ABS_PATH_NOT_FOUND,   // 2025:GAUTH_ERROR_ABS_PATH_NOT_FOUND
  GAUTH_ERROR_ABS_PATH_INVALID,     // 2026:GAUTH_ERROR_ABS_PATH_INVALID
  GAUTH_ERROR_THREAD_NOT_AVAILABLE, // 2027:GAUTH_ERROR_THREAD_NOT_AVAILABLE
  GAUTH_ERROR_CANNOT_GET_LOGGER,    // 2028:GAUTH_ERROR_CANNOT_GET_LOGGER
  GAUTH_ERROR_END
} GAUTH_ERROR;

typedef enum {
  GAUTH_APP_POLICY_ABS_PATH,
  GAUTH_APP_POLICY_PRIVATE_KEY,
  GAUTH_APP_POLICY_DISPLAY_NAME,
  GAUTH_APP_POLICY_EXP,
  GAUTH_APP_POLICY_DBUS_NAME,
  GAUTH_APP_POLICY_NUM
} GAUTH_APP_POLICY_FIELD;

typedef enum {
  GAUTH_FIND_APP_BY_DBUS_NAME,
  GAUTH_FIND_APP_BY_ABS_PATH,
  GAUTH_FIND_APP_FLAG_END
} GAUTH_FIND_APP_FLAG;

static const char *gauth_error_string[] = {
  "GAUTH_ERROR_NONE",                 // 2000:GAUTH_ERROR_NONE
  "GAUTH_ERROR_LSF_CONNECT",          // 2001:GAUTH_ERROR_LSF_CONNECT
  "GAUTH_ERROR_LSF_DF_KEY_REQUEST",   // 2002:GAUTH_ERROR_LSF_DF_KEY_REQUEST
  "GAUTH_ERROR_UNKNOWN_METHOD",       // 2003:GAUTH_ERROR_UNKNOWN_METHOD
  "GAUTH_ERROR_UNKNOWN_GLYPH",        // 2004:GAUTH_ERROR_UNKNOWN_GLYPH
  "GAUTH_ERROR_UNKNOWN_FUNCTION",     // 2005:GAUTH_ERROR_UNKNOWN_FUNCTION
  "GAUTH_ERROR_EMPTY_LETTER",         // 2006:GAUTH_ERROR_EMPTY_LETTER
  "GAUTH_ERROR_DBUS_OWN_NAME",        // 2007:GAUTH_ERROR_DBUS_OWN_NAME
  "GAUTH_ERROR_DBUS_NODE_NEW",        // 2008:GAUTH_ERROR_DBUS_NODE_NEW
  "GAUTH_ERROR_DBUS_REGISTER",        // 2009:GAUTH_ERROR_DBUS_REGISTER
  "GAUTH_ERROR_DBUS_GET",             // 2010:GAUTH_ERROR_DBUS_GET
  "GAUTH_ERROR_DBUS_PROXY_NEW",       // 2011:GAUTH_ERROR_DBUS_PROXY_NEW
  "GAUTH_ERROR_DBUS_PROXY_CALL",      // 2012:GAUTH_ERROR_DBUS_PROXY_CALL
  "GAUTH_ERROR_DBUS_RETURN",          // 2013:GAUTH_ERROR_DBUS_RETURN
  "GAUTH_ERROR_DBUS_CONF_CREATE",     // 2014:GAUTH_ERROR_DBUS_CONF_CREATE
  "GAUTH_ERROR_FILE_OPEN",            // 2015:GAUTH_ERROR_FILE_OPEN
  "GAUTH_ERROR_FILE_READ",            // 2016:GAUTH_ERROR_FILE_READ
  "GAUTH_ERROR_JSON_PARSING",         // 2017:GAUTH_ERROR_JSON_PARSING
  "GAUTH_ERROR_JSON_ARRAY_LENGTH",    // 2018:GAUTH_ERROR_JSON_ARRAY_LENGTH
  "GAUTH_ERROR_JSON_ARRAY_GET",       // 2019:GAUTH_ERROR_JSON_ARRAY_GET
  "GAUTH_ERROR_JSON_OBJECT_GET",      // 2020:GAUTH_ERROR_JSON_OBJECT_GET
  "GAUTH_ERROR_LOAD_POLICY",          // 2021:GAUTH_ERROR_LOAD_POLICY
  "GAUTH_ERROR_MEMORY_ALLOCATION",    // 2022:GAUTH_ERROR_MEMORY_ALLOCATION
  "GAUTH_ERROR_PID_NOT_FOUND",        // 2023:GAUTH_ERROR_PID_NOT_FOUND
  "GAUTH_ERROR_APP_NOT_FOUND",        // 2024:GAUTH_ERROR_APP_NOT_FOUND
  "GAUTH_ERROR_ABS_PATH_NOT_FOUND",   // 2025:GAUTH_ERROR_ABS_PATH_NOT_FOUND
  "GAUTH_ERROR_ABS_PATH_INVALID",     // 2026:GAUTH_ERROR_ABS_PATH_INVALID
  "GAUTH_ERROR_THREAD_NOT_AVAILABLE", // 2027:GAUTH_ERROR_THREAD_NOT_AVAILABLE
  "GAUTH_ERROR_CANNOT_GET_LOGGER"     // 2028:GAUTH_ERROR_CANNOT_GET_LOGGER
};

typedef struct _app_info_t {
  struct _app_info_t *next;
  char               *app_policy_field[GAUTH_APP_POLICY_NUM];
} app_info_t;

typedef struct _dbus_msg_t {
  GDBusMethodInvocation *invocation;
  const gchar           *method_name;
  const gchar           *sender;
  const gchar           *in_json;
  app_info_t            *target_app;
  gchar                 *letter;
  gchar                 *decoded_letter;
  gchar                 *out_json;
  gchar                 *function;
  gchar                 *in_glyph;
  gchar                 *out_glyph;
  int                    error_code;
  int                    state;
} dbus_msg_t;
    
typedef struct _GAuth {
  GDBusNodeInfo *node_info;
  GThreadPool   *pool;
  app_info_t    *head;
  app_info_t    *tail;
  GMainLoop     *loop;
  Logger        *logger;
  guint          owner_id;
  char          *symm_key;
  int            state;
  int          (*gauth_action[GAUTH_STATE_NUM])(void);
  int          (*handle_message[GAUTH_MESSAGE_STATE_NUM])(dbus_msg_t *);
  int            bus_reg_id;
} GAuth;

#endif
